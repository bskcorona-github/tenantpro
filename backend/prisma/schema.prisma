// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  password  String
  name      String
  role      String
  tenants   Tenant[]       @relation("UserTenants")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orders    OrderDetails[]
  Sale      Sale[]
}

model Tenant {
  id        Int       @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     User      @relation("UserTenants", fields: [ownerId], references: [id])
  products  Product[] @relation("TenantProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Sale      Sale[]

  @@unique([ownerId, name])
}

model Product {
  id        Int            @id @default(autoincrement())
  name      String
  price     Float
  category  String
  stock     Int
  tenantId  Int
  tenant    Tenant         @relation("TenantProducts", fields: [tenantId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orders    OrderDetails[]
  Sale      Sale[]
}

model OrderDetails {
  id         Int      @id @default(autoincrement())
  quantity   Int
  totalPrice Float
  userId     Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id          Int      @id @default(autoincrement())
  ownerId     Int
  tenantId    Int
  productId   Int
  quantity    Int
  totalAmount Float
  date        DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  owner       User     @relation(fields: [ownerId], references: [id])
}
